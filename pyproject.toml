[tool.poetry]
name = "tcr-epitope"
version = "0.2.0"
description = "Immune repertoire information retrieval and integration"
authors = [
    "Sebastian Lobentanzer <sebastian.lobentanzer@gmail.com>",
    "Lisa Dratva",
    "Martin Kim",
]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
biocypher = "0.9.3"
pandas = "^2.0.1"
PyGithub = "^1"
requests = "^2"
pooch = "^1"
tqdm = "^4.65.0"
ipykernel = "^6.29.5"
matplotlib = "^3.10.0"
matplotlib-venn = "^1.1.1"
numpy = "2.1"
bio = "^1.7.1"
muon = "^0.1.7"
parasail = "^1.3.4"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
ruff = "^0.11.0"
bump2version = "^1.0.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [".git", ".venv", "__pycache__", "*.pyc", "*.ipynb"]

[tool.ruff.lint]
# Start with a comprehensive set but not ALL
select = [
    "E",    # pycodestyle errors
    "F",    # Pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # naming
    "UP",   # pyupgrade
    "PL",   # Pylint
    "RUF",  # Ruff-specific rules
    "D",    # pydocstyle
    "C90",  # mccabe complexity
    "S",    # flake8-bandit (security)
]
# Ignore rules that are too strict or conflict with each other
ignore = ["D203", "D213", "D103"]  # Contradictory docstring rules

# Per-file rule exemptions
[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "D103"]  # Allow assertions and missing docstrings in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

# Docstring settings
[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
